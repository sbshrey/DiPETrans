// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "gen-cpp/MasterService.h"
#include "gen-cpp/WorkerService.h"
#include "gen-cpp/SharedService.h"

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <iostream>

using namespace std;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::WorkerService;
using namespace  ::SharedService;

class WorkerServiceHandler : virtual public WorkerServiceIf {
 public:
  WorkerServiceHandler() {
    // Your initialization goes here
  }

  void recvGlobalDataItems(const std::map<std::string, int32_t> & GlobalDataItemsMap) {
    // Your implementation goes here
    
    cout << GlobalDataItemsMap.size() << endl;
    /*map<string,int32_t>::iterator itr;
    for (itr = GlobalDataItemsMap.begin(); itr != GlobalDataItemsMap.end(); ++itr) {
      cout << itr->first << "\t" << itr->second << endl;
    }*/
    
    printf("recvGlobalDataItems\n");
  }

  void recvTransactions(std::map<std::string, std::map<int32_t, std::vector<int16_t> > > & _return, const std::vector< ::SharedService::Transaction> & TransactionList) {
    // Your implementation goes here
    cout << TransactionList.size() << endl;
    map<string,std::vector<int16_t>> txnOrder;
    map<string,int32_t> accountValue;
    for (auto const& tx: TransactionList) {
      //printf("%d\n", tx.amount);
      cout << tx.transactionID << "\t" <<tx.senderAddress << "\t" << tx.receiverAddress << "\t" << tx.amount << endl;
      txnOrder[tx.senderAddress].push_back(tx.transactionID);
      
      // ToDo --> add logic to execute transaction
      accountValue[tx.senderAddress] += (-1)*tx.amount;
      txnOrder[tx.receiverAddress].push_back(tx.transactionID);
      accountValue[tx.receiverAddress] += tx.amount;
    }
    for (std::map<string,int32_t>::iterator i = accountValue.begin(); i != accountValue.end(); ++i)
    {
      std::map<int32_t, std::vector<int16_t>> tmpMap;
      tmpMap[i->second] = txnOrder[i->first];
      _return[i->first] = tmpMap;
    }

    printf("recvTransactions\n");
  }

};

int main(int argc, char **argv) {
  int port = atoi(argv[1]);
  ::apache::thrift::stdcxx::shared_ptr<WorkerServiceHandler> handler(new WorkerServiceHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new WorkerServiceProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}
