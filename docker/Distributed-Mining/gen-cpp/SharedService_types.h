/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SharedService_TYPES_H
#define SharedService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace SharedService {

class Transaction;

class Account;

class WorkerNode;

class Uncle;

class WorkerResponse;


class Transaction : public virtual ::apache::thrift::TBase {
 public:

  Transaction(const Transaction&);
  Transaction& operator=(const Transaction&);
  Transaction() : transactionID(0), fromAddress(), toAddress(), value(0), gas(0), gasPrice(0) {
  }

  virtual ~Transaction() throw();
  int16_t transactionID;
  std::string fromAddress;
  std::string toAddress;
  double value;
  double gas;
  double gasPrice;

  void __set_transactionID(const int16_t val);

  void __set_fromAddress(const std::string& val);

  void __set_toAddress(const std::string& val);

  void __set_value(const double val);

  void __set_gas(const double val);

  void __set_gasPrice(const double val);

  bool operator == (const Transaction & rhs) const
  {
    if (!(transactionID == rhs.transactionID))
      return false;
    if (!(fromAddress == rhs.fromAddress))
      return false;
    if (!(toAddress == rhs.toAddress))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(gas == rhs.gas))
      return false;
    if (!(gasPrice == rhs.gasPrice))
      return false;
    return true;
  }
  bool operator != (const Transaction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Transaction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Transaction &a, Transaction &b);

std::ostream& operator<<(std::ostream& out, const Transaction& obj);

typedef struct _Account__isset {
  _Account__isset() : privateKey(false), publicKey(false) {}
  bool privateKey :1;
  bool publicKey :1;
} _Account__isset;

class Account : public virtual ::apache::thrift::TBase {
 public:

  Account(const Account&);
  Account& operator=(const Account&);
  Account() : address(), value(0), privateKey(), publicKey() {
  }

  virtual ~Account() throw();
  std::string address;
  double value;
  std::string privateKey;
  std::string publicKey;

  _Account__isset __isset;

  void __set_address(const std::string& val);

  void __set_value(const double val);

  void __set_privateKey(const std::string& val);

  void __set_publicKey(const std::string& val);

  bool operator == (const Account & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(value == rhs.value))
      return false;
    if (__isset.privateKey != rhs.__isset.privateKey)
      return false;
    else if (__isset.privateKey && !(privateKey == rhs.privateKey))
      return false;
    if (__isset.publicKey != rhs.__isset.publicKey)
      return false;
    else if (__isset.publicKey && !(publicKey == rhs.publicKey))
      return false;
    return true;
  }
  bool operator != (const Account &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Account & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Account &a, Account &b);

std::ostream& operator<<(std::ostream& out, const Account& obj);


class WorkerNode : public virtual ::apache::thrift::TBase {
 public:

  WorkerNode(const WorkerNode&);
  WorkerNode& operator=(const WorkerNode&);
  WorkerNode() : workerID(0), workerIP(), workerPort(0) {
  }

  virtual ~WorkerNode() throw();
  int16_t workerID;
  std::string workerIP;
  int32_t workerPort;

  void __set_workerID(const int16_t val);

  void __set_workerIP(const std::string& val);

  void __set_workerPort(const int32_t val);

  bool operator == (const WorkerNode & rhs) const
  {
    if (!(workerID == rhs.workerID))
      return false;
    if (!(workerIP == rhs.workerIP))
      return false;
    if (!(workerPort == rhs.workerPort))
      return false;
    return true;
  }
  bool operator != (const WorkerNode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkerNode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WorkerNode &a, WorkerNode &b);

std::ostream& operator<<(std::ostream& out, const WorkerNode& obj);


class Uncle : public virtual ::apache::thrift::TBase {
 public:

  Uncle(const Uncle&);
  Uncle& operator=(const Uncle&);
  Uncle() : miner(), number(0) {
  }

  virtual ~Uncle() throw();
  std::string miner;
  int32_t number;

  void __set_miner(const std::string& val);

  void __set_number(const int32_t val);

  bool operator == (const Uncle & rhs) const
  {
    if (!(miner == rhs.miner))
      return false;
    if (!(number == rhs.number))
      return false;
    return true;
  }
  bool operator != (const Uncle &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Uncle & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Uncle &a, Uncle &b);

std::ostream& operator<<(std::ostream& out, const Uncle& obj);


class WorkerResponse : public virtual ::apache::thrift::TBase {
 public:

  WorkerResponse(const WorkerResponse&);
  WorkerResponse& operator=(const WorkerResponse&);
  WorkerResponse() : transactionFees(0) {
  }

  virtual ~WorkerResponse() throw();
  std::map<std::string, double>  accountList;
  std::vector<int16_t>  transactionIDList;
  double transactionFees;

  void __set_accountList(const std::map<std::string, double> & val);

  void __set_transactionIDList(const std::vector<int16_t> & val);

  void __set_transactionFees(const double val);

  bool operator == (const WorkerResponse & rhs) const
  {
    if (!(accountList == rhs.accountList))
      return false;
    if (!(transactionIDList == rhs.transactionIDList))
      return false;
    if (!(transactionFees == rhs.transactionFees))
      return false;
    return true;
  }
  bool operator != (const WorkerResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkerResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WorkerResponse &a, WorkerResponse &b);

std::ostream& operator<<(std::ostream& out, const WorkerResponse& obj);

} // namespace

#endif
