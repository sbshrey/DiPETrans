// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "gen-cpp/MasterService.h"
#include "gen-cpp/WorkerService.h"
#include "gen-cpp/SharedService.h"

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include "Logger.h"
#include <iostream>



using namespace std;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::WorkerService;
using namespace  ::SharedService;

std::map<string, int64_t> GlobalDataItemsMap;

string WID = "1";
string MSG="WorkerServer";


class WorkerServiceHandler : virtual public WorkerServiceIf {
 public:
  WorkerServiceHandler() {
    // Your initialization goes here
    int index = 1;  
      
  }

  void recvTransactions( ::SharedService::WorkerResponse& _return, const std::vector< ::SharedService::Transaction> & TransactionsList, const std::map<std::string, double> & AccountsList) {
    // Your implementation goes here
    //_return.free();
    Logger::instance().log(MSG+" worker "+ WID +" recvTransactions starts", Logger::kLogLevelInfo);
    auto start = chrono::steady_clock::now();
    //printf("\n\nrecvTransactions\n");
    int successful_transactions = 0;
    int failed_transactions = 0;
    int total_transactions = 0;

    double tx_fees = 0;

    Logger::instance().log(MSG+" AccountsList starts", Logger::kLogLevelInfo);
    for (auto const& account: AccountsList)
    {
      _return.accountList[account.first] = account.second;
    }
    Logger::instance().log(MSG+" AccountsList ends", Logger::kLogLevelInfo);

    Logger::instance().log(MSG+" TransactionsList starts", Logger::kLogLevelInfo);
    for (auto const& tx: TransactionsList) {
      //cout << tx.transactionID << "\t";
      double fee;

      if (_return.accountList[tx.fromAddress] >= double(tx.value))
      {
        fee = (double)(tx.gasPrice) * (double)(tx.gas);
        _return.accountList[tx.fromAddress] -= (double)(tx.value) - fee;
        _return.accountList[tx.toAddress] += (double)(tx.value);
        
        //cout << "successful_transactions" << endl;
        //cout << "from_address: " << tx["from_address"] << DataItemsMap[tx["from_address"]] << endl; 
        //cout << "to_address: " << tx["to_address"] << DataItemsMap[tx["to_address"]] << endl; 
        successful_transactions++;
      } else {
        //cout << "Block:"+i_str << endl;
        //cout << "Transaction: " <<DataItemsMap[tx["from"]] << "\t" << ((double)tx["value"]) << endl;
        //cout << "Transaction Failed!!! Insufficient Balance" << endl;
        failed_transactions++;
      }
      tx_fees += fee;
      _return.transactionIDList.push_back(tx.transactionID);
      total_transactions++;
    }
    _return.transactionFees = tx_fees;
    Logger::instance().log(MSG+" TransactionsList ends", Logger::kLogLevelInfo);

    

    //cout << tx_fees << endl;
  
    /*
    map<string,double>::iterator it;
    for (it = _return.accountList.begin(); it != _return.accountList.end(); ++it)
    {
      cout << it->first << "\t" << it->second << endl;
    }
    cout << endl;
    for (auto const & i:_return.transactionIDList)
    {
      cout << i << "\t";
    }
    cout << endl;
    */
    //cout << "\nTransactions Fees: " << _return.transactionFees << endl;
    
    //cout << endl;
    Logger::instance().log(MSG+" worker "+ WID +" recvTransactions ends", Logger::kLogLevelInfo);
    auto end = chrono::steady_clock::now();
    cout << chrono::duration_cast<chrono::microseconds>(end - start).count() << "\t";
    cout << total_transactions << "\t";
    cout << successful_transactions << "\t";
    cout << failed_transactions << endl;
  }

};

int main(int argc, char **argv) {
  int port = atoi(argv[1]);
  WID = argv[2];

  ::apache::thrift::stdcxx::shared_ptr<WorkerServiceHandler> handler(new WorkerServiceHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new WorkerServiceProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}
