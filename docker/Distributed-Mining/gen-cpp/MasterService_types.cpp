/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "MasterService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace MasterService {


MasterNode::~MasterNode() throw() {
}


void MasterNode::__set_masterID(const int16_t val) {
  this->masterID = val;
}

void MasterNode::__set_masterIP(const std::string& val) {
  this->masterIP = val;
}

void MasterNode::__set_masterPort(const int32_t val) {
  this->masterPort = val;
}
std::ostream& operator<<(std::ostream& out, const MasterNode& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MasterNode::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_masterID = false;
  bool isset_masterIP = false;
  bool isset_masterPort = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->masterID);
          isset_masterID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->masterIP);
          isset_masterIP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->masterPort);
          isset_masterPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_masterID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_masterIP)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_masterPort)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MasterNode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MasterNode");

  xfer += oprot->writeFieldBegin("masterID", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->masterID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("masterIP", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->masterIP);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("masterPort", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->masterPort);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MasterNode &a, MasterNode &b) {
  using ::std::swap;
  swap(a.masterID, b.masterID);
  swap(a.masterIP, b.masterIP);
  swap(a.masterPort, b.masterPort);
}

MasterNode::MasterNode(const MasterNode& other0) {
  masterID = other0.masterID;
  masterIP = other0.masterIP;
  masterPort = other0.masterPort;
}
MasterNode& MasterNode::operator=(const MasterNode& other1) {
  masterID = other1.masterID;
  masterIP = other1.masterIP;
  masterPort = other1.masterPort;
  return *this;
}
void MasterNode::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MasterNode(";
  out << "masterID=" << to_string(masterID);
  out << ", " << "masterIP=" << to_string(masterIP);
  out << ", " << "masterPort=" << to_string(masterPort);
  out << ")";
}


Block::~Block() throw() {
}


void Block::__set_timestamp(const std::string& val) {
  this->timestamp = val;
}

void Block::__set_nonce(const int64_t val) {
  this->nonce = val;
}

void Block::__set_prevHash(const std::string& val) {
  this->prevHash = val;
}

void Block::__set_number(const int32_t val) {
  this->number = val;
}

void Block::__set_miner(const std::string& val) {
  this->miner = val;
}

void Block::__set_transactionsList(const std::vector< ::SharedService::Transaction> & val) {
  this->transactionsList = val;
}

void Block::__set_unclesList(const std::vector< ::SharedService::Uncle> & val) {
  this->unclesList = val;
}
std::ostream& operator<<(std::ostream& out, const Block& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Block::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_timestamp = false;
  bool isset_nonce = false;
  bool isset_prevHash = false;
  bool isset_number = false;
  bool isset_miner = false;
  bool isset_transactionsList = false;
  bool isset_unclesList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timestamp);
          isset_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nonce);
          isset_nonce = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->prevHash);
          isset_prevHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number);
          isset_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->miner);
          isset_miner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->transactionsList.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->transactionsList.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->transactionsList[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_transactionsList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->unclesList.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->unclesList.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += this->unclesList[_i11].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_unclesList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_timestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_nonce)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_prevHash)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_number)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_miner)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transactionsList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unclesList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Block::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Block");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nonce", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->nonce);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prevHash", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->prevHash);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("miner", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->miner);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transactionsList", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->transactionsList.size()));
    std::vector< ::SharedService::Transaction> ::const_iterator _iter12;
    for (_iter12 = this->transactionsList.begin(); _iter12 != this->transactionsList.end(); ++_iter12)
    {
      xfer += (*_iter12).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unclesList", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->unclesList.size()));
    std::vector< ::SharedService::Uncle> ::const_iterator _iter13;
    for (_iter13 = this->unclesList.begin(); _iter13 != this->unclesList.end(); ++_iter13)
    {
      xfer += (*_iter13).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Block &a, Block &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.nonce, b.nonce);
  swap(a.prevHash, b.prevHash);
  swap(a.number, b.number);
  swap(a.miner, b.miner);
  swap(a.transactionsList, b.transactionsList);
  swap(a.unclesList, b.unclesList);
}

Block::Block(const Block& other14) {
  timestamp = other14.timestamp;
  nonce = other14.nonce;
  prevHash = other14.prevHash;
  number = other14.number;
  miner = other14.miner;
  transactionsList = other14.transactionsList;
  unclesList = other14.unclesList;
}
Block& Block::operator=(const Block& other15) {
  timestamp = other15.timestamp;
  nonce = other15.nonce;
  prevHash = other15.prevHash;
  number = other15.number;
  miner = other15.miner;
  transactionsList = other15.transactionsList;
  unclesList = other15.unclesList;
  return *this;
}
void Block::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Block(";
  out << "timestamp=" << to_string(timestamp);
  out << ", " << "nonce=" << to_string(nonce);
  out << ", " << "prevHash=" << to_string(prevHash);
  out << ", " << "number=" << to_string(number);
  out << ", " << "miner=" << to_string(miner);
  out << ", " << "transactionsList=" << to_string(transactionsList);
  out << ", " << "unclesList=" << to_string(unclesList);
  out << ")";
}

} // namespace
