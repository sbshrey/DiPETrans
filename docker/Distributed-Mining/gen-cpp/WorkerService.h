/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef WorkerService_H
#define WorkerService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "WorkerService_types.h"
#include "SharedService.h"

namespace WorkerService {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class WorkerServiceIf : virtual public  ::SharedService::SharedServiceIf {
 public:
  virtual ~WorkerServiceIf() {}
  virtual void recvTransactions( ::SharedService::WorkerResponse& _return, const std::vector< ::SharedService::Transaction> & TransactionsList, const std::map<std::string, double> & AccountsList) = 0;
  virtual void mineBlock(const  ::MasterService::Block& block, const int16_t nonce, const int16_t interval) = 0;
};

class WorkerServiceIfFactory : virtual public  ::SharedService::SharedServiceIfFactory {
 public:
  typedef WorkerServiceIf Handler;

  virtual ~WorkerServiceIfFactory() {}

  virtual WorkerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::SharedService::SharedServiceIf* /* handler */) = 0;
};

class WorkerServiceIfSingletonFactory : virtual public WorkerServiceIfFactory {
 public:
  WorkerServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<WorkerServiceIf>& iface) : iface_(iface) {}
  virtual ~WorkerServiceIfSingletonFactory() {}

  virtual WorkerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::SharedService::SharedServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<WorkerServiceIf> iface_;
};

class WorkerServiceNull : virtual public WorkerServiceIf , virtual public  ::SharedService::SharedServiceNull {
 public:
  virtual ~WorkerServiceNull() {}
  void recvTransactions( ::SharedService::WorkerResponse& /* _return */, const std::vector< ::SharedService::Transaction> & /* TransactionsList */, const std::map<std::string, double> & /* AccountsList */) {
    return;
  }
  void mineBlock(const  ::MasterService::Block& /* block */, const int16_t /* nonce */, const int16_t /* interval */) {
    return;
  }
};

typedef struct _WorkerService_recvTransactions_args__isset {
  _WorkerService_recvTransactions_args__isset() : TransactionsList(false), AccountsList(false) {}
  bool TransactionsList :1;
  bool AccountsList :1;
} _WorkerService_recvTransactions_args__isset;

class WorkerService_recvTransactions_args {
 public:

  WorkerService_recvTransactions_args(const WorkerService_recvTransactions_args&);
  WorkerService_recvTransactions_args& operator=(const WorkerService_recvTransactions_args&);
  WorkerService_recvTransactions_args() {
  }

  virtual ~WorkerService_recvTransactions_args() throw();
  std::vector< ::SharedService::Transaction>  TransactionsList;
  std::map<std::string, double>  AccountsList;

  _WorkerService_recvTransactions_args__isset __isset;

  void __set_TransactionsList(const std::vector< ::SharedService::Transaction> & val);

  void __set_AccountsList(const std::map<std::string, double> & val);

  bool operator == (const WorkerService_recvTransactions_args & rhs) const
  {
    if (!(TransactionsList == rhs.TransactionsList))
      return false;
    if (!(AccountsList == rhs.AccountsList))
      return false;
    return true;
  }
  bool operator != (const WorkerService_recvTransactions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkerService_recvTransactions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WorkerService_recvTransactions_pargs {
 public:


  virtual ~WorkerService_recvTransactions_pargs() throw();
  const std::vector< ::SharedService::Transaction> * TransactionsList;
  const std::map<std::string, double> * AccountsList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WorkerService_recvTransactions_result__isset {
  _WorkerService_recvTransactions_result__isset() : success(false) {}
  bool success :1;
} _WorkerService_recvTransactions_result__isset;

class WorkerService_recvTransactions_result {
 public:

  WorkerService_recvTransactions_result(const WorkerService_recvTransactions_result&);
  WorkerService_recvTransactions_result& operator=(const WorkerService_recvTransactions_result&);
  WorkerService_recvTransactions_result() {
  }

  virtual ~WorkerService_recvTransactions_result() throw();
   ::SharedService::WorkerResponse success;

  _WorkerService_recvTransactions_result__isset __isset;

  void __set_success(const  ::SharedService::WorkerResponse& val);

  bool operator == (const WorkerService_recvTransactions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WorkerService_recvTransactions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkerService_recvTransactions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WorkerService_recvTransactions_presult__isset {
  _WorkerService_recvTransactions_presult__isset() : success(false) {}
  bool success :1;
} _WorkerService_recvTransactions_presult__isset;

class WorkerService_recvTransactions_presult {
 public:


  virtual ~WorkerService_recvTransactions_presult() throw();
   ::SharedService::WorkerResponse* success;

  _WorkerService_recvTransactions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WorkerService_mineBlock_args__isset {
  _WorkerService_mineBlock_args__isset() : block(false), nonce(false), interval(false) {}
  bool block :1;
  bool nonce :1;
  bool interval :1;
} _WorkerService_mineBlock_args__isset;

class WorkerService_mineBlock_args {
 public:

  WorkerService_mineBlock_args(const WorkerService_mineBlock_args&);
  WorkerService_mineBlock_args& operator=(const WorkerService_mineBlock_args&);
  WorkerService_mineBlock_args() : nonce(0), interval(0) {
  }

  virtual ~WorkerService_mineBlock_args() throw();
   ::MasterService::Block block;
  int16_t nonce;
  int16_t interval;

  _WorkerService_mineBlock_args__isset __isset;

  void __set_block(const  ::MasterService::Block& val);

  void __set_nonce(const int16_t val);

  void __set_interval(const int16_t val);

  bool operator == (const WorkerService_mineBlock_args & rhs) const
  {
    if (!(block == rhs.block))
      return false;
    if (!(nonce == rhs.nonce))
      return false;
    if (!(interval == rhs.interval))
      return false;
    return true;
  }
  bool operator != (const WorkerService_mineBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkerService_mineBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WorkerService_mineBlock_pargs {
 public:


  virtual ~WorkerService_mineBlock_pargs() throw();
  const  ::MasterService::Block* block;
  const int16_t* nonce;
  const int16_t* interval;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class WorkerServiceClient : virtual public WorkerServiceIf, public  ::SharedService::SharedServiceClient {
 public:
  WorkerServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::SharedService::SharedServiceClient(prot, prot) {}
  WorkerServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::SharedService::SharedServiceClient(iprot, oprot) {}
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void recvTransactions( ::SharedService::WorkerResponse& _return, const std::vector< ::SharedService::Transaction> & TransactionsList, const std::map<std::string, double> & AccountsList);
  void send_recvTransactions(const std::vector< ::SharedService::Transaction> & TransactionsList, const std::map<std::string, double> & AccountsList);
  void recv_recvTransactions( ::SharedService::WorkerResponse& _return);
  void mineBlock(const  ::MasterService::Block& block, const int16_t nonce, const int16_t interval);
  void send_mineBlock(const  ::MasterService::Block& block, const int16_t nonce, const int16_t interval);
};

class WorkerServiceProcessor : public  ::SharedService::SharedServiceProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<WorkerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (WorkerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_recvTransactions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mineBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  WorkerServiceProcessor(::apache::thrift::stdcxx::shared_ptr<WorkerServiceIf> iface) :
     ::SharedService::SharedServiceProcessor(iface),
    iface_(iface) {
    processMap_["recvTransactions"] = &WorkerServiceProcessor::process_recvTransactions;
    processMap_["mineBlock"] = &WorkerServiceProcessor::process_mineBlock;
  }

  virtual ~WorkerServiceProcessor() {}
};

class WorkerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  WorkerServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< WorkerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< WorkerServiceIfFactory > handlerFactory_;
};

class WorkerServiceMultiface : virtual public WorkerServiceIf, public  ::SharedService::SharedServiceMultiface {
 public:
  WorkerServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<WorkerServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<apache::thrift::stdcxx::shared_ptr<WorkerServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::SharedService::SharedServiceMultiface::add(*iter);
    }
  }
  virtual ~WorkerServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<WorkerServiceIf> > ifaces_;
  WorkerServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<WorkerServiceIf> iface) {
     ::SharedService::SharedServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void recvTransactions( ::SharedService::WorkerResponse& _return, const std::vector< ::SharedService::Transaction> & TransactionsList, const std::map<std::string, double> & AccountsList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recvTransactions(_return, TransactionsList, AccountsList);
    }
    ifaces_[i]->recvTransactions(_return, TransactionsList, AccountsList);
    return;
  }

  void mineBlock(const  ::MasterService::Block& block, const int16_t nonce, const int16_t interval) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mineBlock(block, nonce, interval);
    }
    ifaces_[i]->mineBlock(block, nonce, interval);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class WorkerServiceConcurrentClient : virtual public WorkerServiceIf, public  ::SharedService::SharedServiceConcurrentClient {
 public:
  WorkerServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::SharedService::SharedServiceConcurrentClient(prot, prot) {}
  WorkerServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::SharedService::SharedServiceConcurrentClient(iprot, oprot) {}
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void recvTransactions( ::SharedService::WorkerResponse& _return, const std::vector< ::SharedService::Transaction> & TransactionsList, const std::map<std::string, double> & AccountsList);
  int32_t send_recvTransactions(const std::vector< ::SharedService::Transaction> & TransactionsList, const std::map<std::string, double> & AccountsList);
  void recv_recvTransactions( ::SharedService::WorkerResponse& _return, const int32_t seqid);
  void mineBlock(const  ::MasterService::Block& block, const int16_t nonce, const int16_t interval);
  void send_mineBlock(const  ::MasterService::Block& block, const int16_t nonce, const int16_t interval);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
