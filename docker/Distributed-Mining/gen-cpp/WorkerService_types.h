/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef WorkerService_TYPES_H
#define WorkerService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "SharedService_types.h"
#include "MasterService_types.h"


namespace WorkerService {

class result;


class result : public virtual ::apache::thrift::TBase {
 public:

  result(const result&);
  result& operator=(const result&);
  result() : number(0), nonce(0) {
  }

  virtual ~result() throw();
  int32_t number;
  int64_t nonce;

  void __set_number(const int32_t val);

  void __set_nonce(const int64_t val);

  bool operator == (const result & rhs) const
  {
    if (!(number == rhs.number))
      return false;
    if (!(nonce == rhs.nonce))
      return false;
    return true;
  }
  bool operator != (const result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(result &a, result &b);

std::ostream& operator<<(std::ostream& out, const result& obj);

} // namespace

#endif
